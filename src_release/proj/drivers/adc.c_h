
#include "../tl_common.h"

#if(__TL_LIB_8267__ || (MCU_CORE_TYPE == MCU_CORE_8267))

/**************************************************************************************************
  Filename:       	adc.c
  Author:			junjun.xu@telink-semi.com
  Created Date:	2016/06/05

  Description:    This file contains the adc driver functions for the Telink 8267. It provided some sample applications like battery check and temperature check

**************************************************************************************************/
#include "adc.h"


#define		EN_ADCCLK			(*(volatile unsigned char  *)0x80006b |= 0x80)

//Select ADC mannul mode
#define		EN_MANUALM			write_reg8(0x800033,0x00)


//Start sampling and conversion process for mannual mode
#define		STARTSAMPLING		write_reg8(0x800035,0x80)

//Read sampling data
#define		READOUTPUTDATA		read_reg16(0x800038)

/********************************************************
*
*	@brief		set ADC reference voltage for the Misc and L channel
*
*	@param		adcCha - enum variable adc channel.
*				adcRF - enum variable of adc reference voltage.
*
*	@return		None
*/
void adc_RefVoltageSet(enum ADCRFV adcRF){
	unsigned char st;

	st = (unsigned char)adcRF;
	*(volatile unsigned char  *)0x80002b &= 0xFC;

	*(volatile unsigned char  *)0x80002b |= st;
}


/********************************************************
*
*	@brief		set ADC resolution for channel Misc
*
*	@param		adcRes - enum variable adc resolution.
*
*	@return		None
*/
void adc_ResSet(enum ADCRESOLUTION adcRes){
	unsigned char resN;
	resN = (unsigned char )adcRes;
	*(volatile unsigned char  *)0x80003c &= 0xC7;
	*(volatile unsigned char  *)0x80003c |= (resN<<3);
}


/********************************************************
*
*	@brief		set ADC sample time(the number of adc clocks for each sample)
*
*	@param		adcCha - enum variable adc channel.
*				adcST - enum variable of adc sample time.
*
*	@return		None
*/

void adc_SampleTimeSet( enum ADCST adcST){

	unsigned char st;
	st = (unsigned char)adcST;

	*(volatile unsigned char  *)(0x80003c) &= 0xF8;

	*(volatile unsigned char  *)(0x80003c) |= st;
}


/********************************************************
*
*	@brief		set ADC analog input channel
*
*	@param		adcCha - enum variable adc channel.
*				adcInCha - enum variable of adc input channel.
*
*	@return		None
*/
void adc_AnaChSet(enum ADCINPUTCH adcInCha){
	unsigned char cnI;

	cnI = (unsigned char)adcInCha;

	*(volatile unsigned char  *)(0x80002c) &= 0xE0;
	*(volatile unsigned char  *)(0x80002c) |= cnI;
}

/***************************************************************************
*
*	@brief	set IO power supply for the 1/3 voltage division detection, there are two input sources of the
*			IO input battery voltage, one through the VDDH and the other through the  ANA_B<7> pin
*
*	@param	IOp - input power source '1' is the VDDH; '2' is the ANA_B<7>.
*
*	@return	'1' setting success; '0' set error
*/
static unsigned char adc_IOPowerSupplySet(unsigned char IOp){
	unsigned char vv1;
	if(IOp>2||IOp<1){

		return 0;
	}
	else{
		vv1 = ReadAnalogReg(0x02);
		vv1 = vv1 & 0xcf;
		vv1 = vv1 | (IOp<<4);
		WriteAnalogReg(0x02,vv1);
		return 1;
	}
}

/********************************************************
*
*	@brief		set ADC input channel mode - signle-end or differential mode
*
*	@param		adcCha - enum variable adc channel.
*				inM - enum variable of ADCINPUTMODE.
*
*	@return		None
*/
void adc_AnaModeSet( enum ADCINPUTMODE inM){
	unsigned char cnM;

	cnM = (unsigned char)inM;
	*(volatile unsigned char  *)(0x80002c) &= 0x1F;
	*(volatile unsigned char  *)(0x80002c) |= (cnM<<5);
}


/**********************************************************************
*	@brief	ADC initiate function, set the ADC clock details (4MHz) and start the ADC clock.
*			ADC clock relys on PLL, if the FHS isn't selected to 192M PLL (probably modified
*			by other parts codes), adc initiation function will returns error.
*
*	@param	None
*
*	@return	setResult - '1' set success; '0' set error
*/
unsigned char adc_Init(void ){

	unsigned char fhsBL,fhsBH;

	/******set adc clk as 4MHz******/
	write_reg8(0x800069,0x04); // adc clk step as 4
	write_reg8(0x80006a,0xc0); // adc clk mode as 192

	fhsBL = read_reg8(0x800070)&0x01;//0x70[0]
	fhsBH = read_reg8(0x800066)&0x80;//0x66[7]
	fhsBL = fhsBL|fhsBH;
	if(fhsBL){//FHS not default set to 192MHz
		return 0;
	}
	write_reg8(0x800070,0x00);// sel adc clk source as 192M pll
	write_reg8(0x80006b,0x80); // adc clk enable
	WriteAnalogReg(0x88,0x0f);// select 192M clk output
	WriteAnalogReg(0x05,0x60);// power on pll
	WriteAnalogReg(0x06,0xfe);// power on sar
	write_reg16(0x800030,(0xE2<<2));//set M channel period as (0xE2<<2), L channel's period is 0x06*16 defaultly,so sample frequency is sysclk/(0xE2<<2+0x06*16)
	EN_ADCCLK;//Enable adc CLK
	EN_MANUALM;
	return 1;
}
/********************************************************
*
*	@brief		Initiate function for the battery check function
*
*	@param		checkM - Battery check mode, '0' for battery dircetly connected to chip,
*				'1' for battery connected to chip via boost DCDC
*
*	@return		None
*/
void adc_BatteryCheckInit(unsigned char checkM){
	/***1.set adc mode and input***/
	write_reg8(0x80002c,0x12);       //select "1/3 voltage division detection" as single-end input

	/***2.set battery check mode***/
	if(!checkM)
		adc_IOPowerSupplySet(1);
	else
		adc_IOPowerSupplySet(2);

	/***3.set adc reference voltage***/
	adc_RefVoltageSet(RV_1P428);     //Set reference voltage (V_REF)as  1.428V

	/***4.set adc resultion***/
	adc_ResSet(RES14);               //Set adc resolution to 14 bits, bit[14] to bit bit[1]

	/***5.set adc sample time***/
	adc_SampleTimeSet(S_3);          //set sample time

	/***6.enable manual mode***/
	EN_MANUALM;
}
/********************************************************
*
*	@brief		get the battery value
*
*	@param		None
*
*	@return		unsigned long - return the sampling value
*/
unsigned short adc_BatteryValueGet(void){

	unsigned short sampledValue;

	STARTSAMPLING;

	while(CHECKADCSTATUS);

	sampledValue = READOUTPUTDATA&0x3FFF;

	return sampledValue;
}
/********************************************************
*
*	@brief		Initiate function for the temparture sensor
*
*	@param		None
*
*	@return		None
*/

void adc_TemSensorInit(void){
	/***1.set adc mode and input***/
	write_reg8(0x80002c,0x0f);  //select TEMSENSORN as single-end input

	/***2. set adc reference voltage***/
	adc_RefVoltageSet(RV_AVDD);

	/***3.set adc resultion***/
	adc_ResSet(RES14);

	/***4.set adc sample time***/
	adc_SampleTimeSet(S_3);

	/***5.enable manual mode***/
	EN_MANUALM;
}

/********************************************************
*
*	@brief		get the temperature sensor sampled value
*
*	@param		None
*
*	@return		unsigned short - return the adc sampled value 14bits significants
*/

unsigned short adc_TemValueGet(void){
	unsigned short sampledValue;
	STARTSAMPLING;
	while(CHECKADCSTATUS);
	sampledValue = (unsigned short)(READOUTPUTDATA & 0x3FFF);
	STARTSAMPLING;
	while(CHECKADCSTATUS);
	sampledValue = sampledValue - (unsigned short)(READOUTPUTDATA & 0x3FFF);
	return sampledValue;
}

/*************************************************************************
*
*	@brief	get adc sampled value
*
*	@param	none
*
*	@return	sampled_value:	raw data
*/
unsigned short adc_SampleValueGet(void){
	//unsigned short sampledValue;
	STARTSAMPLING;
	while(CHECKADCSTATUS);
	return READOUTPUTDATA;
}


#elif(__TL_LIB_8266__ || (MCU_CORE_TYPE == MCU_CORE_8266))


#include "../tl_common.h"

#if (MODULE_ADC_ENABLE)
static inline void adc_set_clk_freq(u8 mhz){
	reg_adc_step_l = mhz*4;
	reg_adc_mod = MASK_VAL(FLD_ADC_MOD, 192*4, FLD_ADC_CLK_EN, 1);
}


static inline void adc_set_l_chn(u8 chn, u8 mic_en){
	reg_adc_pga_sel_l = chn >> 8;	//C0, C1, C2 & C3
	reg_adc_chn_l_sel = chn | FLD_ADC_DATA_SIGNED;
	if(mic_en){
		analog_write (raga_pga_gain0, 0x50);
		analog_write (raga_pga_gain1, 0x22);

		reg_clk_en2 |= FLD_CLK2_DIFIO_EN;
		reg_dfifo_ana_in = FLD_DFIFO_AUD_INPUT_MONO | FLD_DFIFO_MIC_ADC_IN;
		reg_dfifo_scale = 5;				// down scale by 6,  96K / 6 == 16K
		reg_aud_hpf_alc = 11;				// volume setting
		reg_aud_alc_vol = 2;

	}else{
		analog_write (raga_pga_gain0, 0x53);
		analog_write (raga_pga_gain1, 0x00);
	}

}

static inline void adc_set_period(void){
	reg_adc_period_chn0 = 77;
	reg_adc_period_chn12 = 8;
}

void adc_clk_en(int en){
	if (en) {
		// Eanble the clock
		reg_adc_clk_en |= BIT(7);

		// Enable ADC LDO
		analog_write(rega_pwdn_ldo,(analog_read(rega_pwdn_ldo)&0xfe));
	} else {
	    // Disable ADC clock
	    reg_adc_clk_en &= ~ BIT(7);

	    // Disable ADC LDO
		analog_write(rega_pwdn_ldo,(analog_read(rega_pwdn_ldo)&0xfe));
	}
}
u8 adc_clk_step_l = 0;
u8	adc_chn_m_input = 0;

void adc_init()
{
	// pin selection
	reg_adc_chn_m_sel = ADC_CHNM_ANA_INPUT;
	adc_chn_m_input = ADC_CHNM_ANA_INPUT;

    // Set sample rate and cycle, default to 14bit
	reg_adc_samp_res = MASK_VAL(FLD_ADC_CHNM_SAMP_CYCLE, ADC_SAMPLING_CYCLE_6
		, FLD_ADC_CHNM_SAMP_RESOL, ADC_SAMPLING_RES_14BIT
		, FLD_ADC_CHNLR_SAMP_CYCLE, ADC_SAMPLING_CYCLE_9);

    // Set Reference voltage
  	reg_adc_ref = ADC_CHNM_REF_SRC;		// ref: 0 1.3v  04 AVDD

	// Set ALL manual mode
	reg_adc_ctrl = 0x20;

	// Setting clk
	adc_set_clk_freq(4);
	adc_clk_step_l = 4;

	// Enable ADC
	adc_clk_en(1);
}


u16 adc_get(void)
{
	// Set a run signal
	reg_adc_chn1_outp = FLD_ADC_CHN_MANU_START;

	// wait for data
	sleep_us(5);

	// read data
	return (reg_adc_dat_byp_outp & 0x3FFF);
}

/*between start and end must > 200us
 * ½öÊÊÓÃÓÚ8266 A2Ð¾Æ¬
 * power down step£º
 * 	1, change input to GND
 * 	2, lower adc clk
 * 	3, start adc
 * 	4, wait > 200us(we can do something else)
 * 	5, start adc again
 * 	6, wait adc latch state,the interval calculation base on system clk and adc clk
 * 	7, power down adc in analog register
 * 	9, recover adc setting
 * */
void adc_power_down(void){
	u8 adc_m_input = reg_adc_chn_m_sel;
	u8 adc_step_low = reg_adc_step_l;
	/*step 0*/
	write_reg8(0x2c,0x12);  //chnm: GND
	write_reg8(0x69,0x01);  //set adc clk = 192M/(192*4) = 0.25K
	write_reg8(0x35,0x80);  //start

	sleep_us(200);
	/*step 1*/
	write_reg8(0x35,0x80);  //start again
	sleep_us(26);             //14 us
	analog_write(0x06,0x01);
	/*step 2*/
	reg_adc_chn_m_sel = adc_m_input;
	reg_adc_step_l = adc_step_low;//set adc clk= 192M * 16/(192 *4) = 4M
}

void adc_power_down_start(void){

	write_reg8(0x2c,0x12);  //chn: GND
	write_reg8(0x69,0x01);  //set adc clk = 192M/(192*4) = 0.25K
	write_reg8(0x35,0x80);  //start
}
void adc_power_down_end(void){
	write_reg8(0x35,0x80);  //start again
	sleep_us(26);             //14 us
	analog_write(0x06,0x01);
}
void adc_setting_recover(void){
#if 1
	reg_adc_step_l = adc_clk_step_l;
	reg_adc_chn_m_sel = adc_chn_m_input;
#else
	reg_adc_chn_m_sel = FLD_ADC_CHN_C7;
	reg_adc_step_l = 16;//set adc clk= 192M * 16/(192 *4) = 4M

#endif
}

#endif
/*
void adc_example(void)
{
    adc_init(GPIO_PC2, ADC_REF_1_3V);
    ......
    u16 result = adc_get();
    printf("voltage = %dmv\r\n", ((result*1300)>>14)); // Here >>14 means ( result * 1300 / 0x3fff)
}
*/




#endif

