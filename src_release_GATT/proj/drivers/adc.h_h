/**************************************************************************************************
  Filename:       	adc.h
  Author:			junjun.xu@telink-semi.com
  Created Date:	2016/06/05

  Description:    This file contains the enum variable defination details used for adc function


**************************************************************************************************/


#if(__TL_LIB_8267__ || (MCU_CORE_TYPE == MCU_CORE_8267))

#ifndef 	adc_new_H
#define 	adc_new_H

#include "../mcu/register.h"
#include "../common/compatibility.h"
#include "../common/utility.h"

//ADC reference voltage
enum ADCRFV{
	RV_1P428,
	RV_AVDD,
	RV_1P224,
};
//ADC resolution
enum ADCRESOLUTION{
	RES7,
	RES9,
	RES10,
	RES11,
	RES12,
	RES13,
	RES14,
};

//ADC Sampling time
enum ADCST{
	S_3,
	S_6,
	S_9,
	S_12,
	S_18,
	S_24,
	S_48,
	S_144,
};

//ADC analog input channel selection enum
enum ADCINPUTCH{
	NOINPUT,
	C0,
	C1,
	C6,
	C7,
	B0,
	B1,
	B2,
	B3,
	B4,
	B5,
	B6,
	B7,
	PGAVOM,
	PGAVOP,
	TEMSENSORN,
	TEMSENSORP,
	AVSS,
	OTVDD,//1/3 voltage division detection
};
//ADC channel input mode
enum ADCINPUTMODE{
	SINGLEEND,
	INVERTB_1,
	INVERTB_3,
	PGAVOPM,
};


//set period for Misc
#define		SET_P(v)			write_reg16(0x800030,(v<<2)&0x0FFF)


//Check adc status, busy return 1
#define		CHECKADCSTATUS		(((*(volatile unsigned char  *)0x80003a) & 0x01) ? 1:0)


/********************************************************
*
*	@brief		set ADC resolution for channel Misc
*
*	@param		adcRes - enum variable adc resolution.
*
*	@return		None
*/
extern void adc_ResSet(enum ADCRESOLUTION adcRes);


/********************************************************
*
*	@brief		set ADC input channel
*
*	@param		adcCha - enum variable adc channel.
*				adcInCha - enum variable of adc input channel.
*
*	@return		None
*/
extern void adc_AnaChSet( enum ADCINPUTCH adcInCha);



/***************************************************************************
*
*	@brief	This function must be called when the input channel selected to 1/3 volatage division.
*			Set IO power supply for the 1/3 voltage division detection, there are two input sources of the
*			IO input battery voltage, one through the VDDH and the other through the  ANA_B<7> pin.
*
*	@param	IOp - input power source '1' is the VDDH; '2' is the ANA_B<7>.
*
*	@return	'1' set success; '0' set error
*/
// extern unsigned char adc_IOPowerSupplySet(unsigned char IOp);

/********************************************************
*
*	@brief		set ADC input channel mode - signle-end or differential mode
*
*	@param		adcCha - enum variable adc channel.
*				inM - enum variable of ADCINPUTMODE.
*
*	@return		None
*/
extern void adc_AnaModeSet( enum ADCINPUTMODE inM);

/********************************************************
*
*	@brief		set ADC sample time(the number of adc clocks for each sample)
*
*	@param		adcCha - enum variable adc channel.
*				adcST - enum variable of adc sample time.
*
*	@return		None
*/
extern void adc_SampleTimeSet(enum ADCST adcST);

/********************************************************
*
*	@brief		set ADC reference voltage for the Misc and L channel
*
*	@param		adcCha - enum variable adc channel.
*				adcRF - enum variable of adc reference voltage.
*
*	@return		None
*/
extern void adc_RefVoltageSet(enum ADCRFV adcRF);


/**********************************************************************
*	@brief	ADC initiate function, set the ADC clock details (3MHz) and start the ADC clock.
*			ADC clock relys on PLL, if the FHS isn't selected to 192M PLL (probably modified
*			by other parts codes), adc initiation function will returns error.
*
*	@param	None
*
*	@return	setResult - '1' set success; '0' set error
*/
extern unsigned char adc_Init(void );
/********************************************************
*
*	@brief		Initiate function for the battery check function
*
*	@param		checkM - Battery check mode, '0' for battery dircetly connected to chip,
*				'1' for battery connected to chip via boost DCDC
*
*	@return		None
*/
extern void adc_BatteryCheckInit(unsigned char checkM);
/********************************************************
*
*	@brief		get the battery value
*
*	@param		None
*
*	@return		unsigned long - return the sampling value multiplex 3
*/
extern unsigned short adc_BatteryValueGet(void);

/********************************************************
*
*	@brief		Initiate function for the temparture sensor
*
*	@param		None
*
*	@return		None
*/
extern void adc_TemSensorInit(void);
/********************************************************
*
*	@brief		get the temperature sensor sampled value
*
*	@param		None
*
*	@return		unsigned short - return the adc sampled value 14bits significants
*/
extern unsigned short adc_TemValueGet(void);

/*************************************************************************
*
*	@brief	get adc sampled value
*
*	@param	adc_ch:	adc channel select, MISC or the LCHANNEL, enum variable
*			sample_mode:	adc sample mode, '1' manual mode; '0' auto sample mode
*
*	@return	sampled_value:	raw data
*/
extern unsigned short adc_SampleValueGet(void);

#endif

#elif(__TL_LIB_8266__ || (MCU_CORE_TYPE == MCU_CORE_8266))


#pragma once

/* Enable C linkage for C++ Compilers: */
#if defined(__cplusplus)
extern "C" {
#endif

/** @addtogroup  HAL_ADC_Module ADC Module
 *  @{
 *  @details	ADC Module can used to sample battery voltage,temperature sensor,mono audio signals.
 */

#include "../common/types.h"
#include "../mcu_spec/anareg_8886.h"

/** @addtogroup  HAL_ADC_REF ADC Reference
 *  @{
 */
#define ADC_REF_1_3V             0x00		//!< ADC Reference:1.3v
#define ADC_REF_AVDD             0x04		//!< ADC Reference:AVDD
/** @} end of group HAL_ADC_REF */


/** @addtogroup  HAL_ADC_DONE_SIGNAL ADC Done Signal
 *  @{
 */
enum{
	ADC_DONE_SIGNAL_COUNTER,
	ADC_DONE_SIGNAL_RISING,
	ADC_DONE_SIGNAL_FALLING,
};
/** @} end of group HAL_ADC_DONE_SIGNAL */


/** @addtogroup  HAL_ADC_AUDIO_MODE ADC Audio Mode
 *  @{
 */
enum{
	ADC_AUDIO_MODE_NONE,		//!< ADC Audio Mode Uselessly
	ADC_AUDIO_MODE_MONO,		//!< ADC Audio Mono Mode
	ADC_AUDIO_MODE_STEREO,		//!< ADC Audio Stereo Mode,8266 not supported this mode.
};
/** @} end of group HAL_ADC_AUDIO_MODE */


//enum{
//	FLD_ADC_CHN_D0=1,
//	FLD_ADC_CHN_D1
//	FLD_ADC_CHN_D2,
//	FLD_ADC_CHN_D3,
//	FLD_ADC_CHN_D4,
//	FLD_ADC_CHN_D5,
//	FLD_ADC_CHN_C2,
//	FLD_ADC_CHN_C3,
//	FLD_ADC_CHN_C4,
//	FLD_ADC_CHN_C5,
//	FLD_ADC_CHN_C6,
//	FLD_ADC_CHN_C7,
//
//	FLD_ADC_CHN_GND = 0x12,
//};


/** @addtogroup  HAL_ADC_SAMP_CYC ADC Sample Cycle
 *  @{
 *  The cycle on adc clock for complete a Sampling
 */
enum{
	ADC_SAMPLING_CYCLE_3 = 0,		//!<Adc Sampling Cycle:3
	ADC_SAMPLING_CYCLE_6 = 1,		//!<Adc Sampling Cycle:6
	ADC_SAMPLING_CYCLE_9 = 2,		//!<Adc Sampling Cycle:9
	ADC_SAMPLING_CYCLE_12 = 3,		//!<Adc Sampling Cycle:12
	ADC_SAMPLING_CYCLE_18 = 4,		//!<Adc Sampling Cycle:18
	ADC_SAMPLING_CYCLE_24 = 5,		//!<Adc Sampling Cycle:24
	ADC_SAMPLING_CYCLE_48 = 6,		//!<Adc Sampling Cycle:48
	ADC_SAMPLING_CYCLE_144 = 7,		//!<Adc Sampling Cycle:144
};
/** @} end of group HAL_ADC_SAMP_CYC */

/** @addtogroup  HAL_ADC_RES ADC Resolution
 *  @{
 *  The ADC Resolution is 1/(2^adc_res_bits - 1)
 */
enum{
	ADC_SAMPLING_RES_7BIT = 0,		//!<ADC Sample Resolution Bits:adc_res_bits = 7
	ADC_SAMPLING_RES_9BIT = 1,		//!<ADC Sample Resolution Bits:adc_res_bits = 9
	ADC_SAMPLING_RES_10BIT = 2,		//!<ADC Sample Resolution Bits:adc_res_bits = 10
	ADC_SAMPLING_RES_11BIT = 3,		//!<ADC Sample Resolution Bits:adc_res_bits = 11
	ADC_SAMPLING_RES_12BIT = 4,		//!<ADC Sample Resolution Bits:adc_res_bits = 12
	ADC_SAMPLING_RES_13BIT = 5,		//!<ADC Sample Resolution Bits:adc_res_bits = 13
	ADC_SAMPLING_RES_14BIT = 7,		//!<ADC Sample Resolution Bits:adc_res_bits = 14
};
/** @} end of group HAL_ADC_RES */

/**
 * @brief  		ADC Initialization
 *
 * @return  None
 * @details	  - adc_init has already set some parameter:
 *				  -# channel misc sampling cycle:6
 *				  -# channel misc resolution: 14 bits
 *				  -# channel left and right sample cycle:9
 *				  -# adc clk:4Mhz
 *				  -# adc module state:power on
 *
 */
void adc_init();

/**
 * @brief  		Start ADC and get the channel misc converter result
 *
 * @param		None
 *
 * @return  	ADC Result
 */
u16 adc_get(void);

void adc_power_down(void);

void adc_power_down_start(void);
void adc_power_down_end(void);
void adc_setting_recover(void);

/** @} end of group HAL_ADC_Module */

/* Disable C linkage for C++ Compilers: */
#if defined(__cplusplus)
}
#endif



#endif
